{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///webpack/bootstrap 6d3c85b0a7cdb1d9e86d","webpack:///./src/helpers/is_array.js","webpack:///./src/bitap/index.js","webpack:///./src/helpers/deep_value.js","webpack:///./src/bitap/bitap_matched_indices.js","webpack:///./src/bitap/bitap_pattern_alphabet.js","webpack:///./src/bitap/bitap_regex_search.js","webpack:///./src/bitap/bitap_score.js","webpack:///./src/bitap/bitap_search.js","webpack:///./src/index.js"],"names":["module","exports","Array","isArray","Object","prototype","toString","call","obj","bitapRegexSearch","require","bitapSearch","patternAlphabet","Bitap","pattern","location","distance","threshold","maxPatternLength","isCaseSensitive","tokenSeparator","findAllMatches","minMatchCharLength","options","toLowerCase","length","text","isMatch","score","matchedIndices","deepValue","path","list","push","dotIndex","indexOf","firstSegment","remaining","slice","value","undefined","i","len","matchmask","start","end","match","mask","charAt","SPECIAL_CHARS_REGEX","regex","RegExp","replace","matches","matchesLen","errors","currentLocation","expectedLocation","accuracy","proximity","Math","abs","bitapScore","textLen","currentThreshold","bestLocation","patternLen","matchMask","min","lastIndexOf","lastBitArr","finalScore","binMax","binMin","binMid","floor","max","finish","bitArr","j","charMatch","Fuse","caseSensitive","id","keys","shouldSort","getFn","sortFn","a","b","tokenize","matchAllTokens","includeMatches","includeScore","verbose","cancelled","isSearching","setCollection","Promise","resolve","checkIfStopped","setTimeout","_log","_prepareSearchers","tokenSearchers","fullSearcher","_search","then","weights","results","_computeScore","_sort","_format","tokens","split","iterate","callbackFn","chunk","index","doChunk","Error","cnt","resultMap","val","_analyze","key","record","item","keysLen","name","weight","arrayIndex","exists","averageScore","numTextMatches","mainSearchResult","search","words","scores","tokenSearcher","hasMatchInText","word","tokenSearchResult","scoresLen","checkTextMatches","existingResult","output","scoreLen","currScore","bestScore","nScore","sort","finalOutput","JSON","stringify","transformers","result","data","indices","hasOwnProperty","log","arguments"],"mappings":"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","file":"fuse.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"Fuse\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"Fuse\"] = factory();\n\telse\n\t\troot[\"Fuse\"] = factory();\n})(this, function() {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// identity function for calling harmony imports with the correct context\n \t__webpack_require__.i = function(value) { return value; };\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 8);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 6d3c85b0a7cdb1d9e86d","module.exports = obj => !Array.isArray ? Object.prototype.toString.call(obj) === '[object Array]' : Array.isArray(obj)\n\n\n\n// WEBPACK FOOTER //\n// ./src/helpers/is_array.js","const bitapRegexSearch = require('./bitap_regex_search')\nconst bitapSearch = require('./bitap_search')\nconst patternAlphabet = require('./bitap_pattern_alphabet')\n\nclass Bitap {\n  constructor (pattern, {\n    // Approximately where in the text is the pattern expected to be found?\n    location = 0,\n    // Determines how close the match must be to the fuzzy location (specified above).\n    // An exact letter match which is 'distance' characters away from the fuzzy location\n    // would score as a complete mismatch. A distance of '0' requires the match be at\n    // the exact location specified, a threshold of '1000' would require a perfect match\n    // to be within 800 characters of the fuzzy location to be found using a 0.8 threshold.\n    distance = 100,\n    // At what point does the match algorithm give up. A threshold of '0.0' requires a perfect match\n    // (of both letters and location), a threshold of '1.0' would match anything.\n    threshold = 0.6,\n    // Machine word size\n    maxPatternLength = 32,\n    // Indicates whether comparisons should be case sensitive.\n    isCaseSensitive = false,\n    // Regex used to separate words when searching. Only applicable when `tokenize` is `true`.\n    tokenSeparator = / +/g,\n    // When true, the algorithm continues searching to the end of the input even if a perfect\n    // match is found before the end of the same input.\n    findAllMatches = false,\n    // Minimum number of characters that must be matched before a result is considered a match\n    minMatchCharLength = 1\n  }) {\n    this.options = {\n      location,\n      distance,\n      threshold,\n      maxPatternLength,\n      isCaseSensitive,\n      tokenSeparator,\n      findAllMatches,\n      minMatchCharLength\n    }\n\n    this.pattern = this.options.isCaseSensitive ? pattern : pattern.toLowerCase()\n\n    if (this.pattern.length <= maxPatternLength) {\n      this.patternAlphabet = patternAlphabet(this.pattern)\n    }\n  }\n\n  search (text) {\n    if (!this.options.isCaseSensitive) {\n      text = text.toLowerCase()\n    }\n\n    // Exact match\n    if (this.pattern === text) {\n      return {\n        isMatch: true,\n        score: 0,\n        matchedIndices: [[0, text.length - 1]]\n      }\n    }\n\n    // When pattern length is greater than the machine word length, just do a a regex comparison\n    const { maxPatternLength, tokenSeparator } = this.options\n    if (this.pattern.length > maxPatternLength) {\n      return bitapRegexSearch(text, this.pattern, tokenSeparator)\n    }\n\n    // Otherwise, use Bitap algorithm\n    const { location, distance, threshold, findAllMatches, minMatchCharLength } = this.options\n    return bitapSearch(text, this.pattern, this.patternAlphabet, {\n      location,\n      distance,\n      threshold,\n      findAllMatches,\n      minMatchCharLength\n    })\n  }\n}\n\n// let x = new Bitap(\"od mn war\", {})\n// let result = x.search(\"Old Man's War\")\n// console.log(result)\n\nmodule.exports = Bitap\n\n\n\n// WEBPACK FOOTER //\n// ./src/bitap/index.js","const isArray = require('./is_array')\n\nconst deepValue = (obj, path, list) => {\n  if (!path) {\n    // If there's no path left, we've gotten to the object we care about.\n    list.push(obj)\n  } else {\n    const dotIndex = path.indexOf('.')\n    let firstSegment = path\n    let remaining = null\n\n    if (dotIndex !== -1) {\n      firstSegment = path.slice(0, dotIndex)\n      remaining = path.slice(dotIndex + 1)\n    }\n\n    const value = obj[firstSegment]\n\n    if (value !== null && value !== undefined) {\n      if (!remaining && (typeof value === 'string' || typeof value === 'number')) {\n        list.push(value.toString())\n      } else if (isArray(value)) {\n        // Search each item in the array.\n        for (let i = 0, len = value.length; i < len; i += 1) {\n          deepValue(value[i], remaining, list)\n        }\n      } else if (remaining) {\n        // An object. Recurse further.\n        deepValue(value, remaining, list)\n      }\n    }\n  }\n\n  return list\n}\n\nmodule.exports = (obj, path) => {\n  return deepValue(obj, path, [])\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/helpers/deep_value.js","module.exports = (matchmask = [], minMatchCharLength = 1) => {\n  let matchedIndices = []\n  let start = -1\n  let end = -1\n  let i = 0\n\n  for (let len = matchmask.length; i < len; i += 1) {\n    let match = matchmask[i]\n    if (match && start === -1) {\n      start = i\n    } else if (!match && start !== -1) {\n      end = i - 1\n      if ((end - start) + 1 >= minMatchCharLength) {\n        matchedIndices.push([start, end])\n      }\n      start = -1\n    }\n  }\n\n  // (i-1 - start) + 1 => i - start\n  if (matchmask[i - 1] && (i - start) >= minMatchCharLength) {\n    matchedIndices.push([start, i - 1])\n  }\n\n  return matchedIndices\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/bitap/bitap_matched_indices.js","module.exports = (pattern) => {\n  let mask = {}\n  let len = pattern.length\n\n  for (let i = 0; i < len; i += 1) {\n    mask[pattern.charAt(i)] = 0\n  }\n\n  for (let i = 0; i < len; i += 1) {\n    mask[pattern.charAt(i)] |= 1 << (len - i - 1)\n  }\n\n  return mask\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/bitap/bitap_pattern_alphabet.js","const SPECIAL_CHARS_REGEX = /[\\-\\[\\]\\/\\{\\}\\(\\)\\*\\+\\?\\.\\\\\\^\\$\\|]/g\n\nmodule.exports = (text, pattern, tokenSeparator = / +/g) => {\n  let regex = new RegExp(pattern.replace(SPECIAL_CHARS_REGEX, '\\\\$&').replace(tokenSeparator, '|'))\n  let matches = text.match(regex)\n  let isMatch = !!matches\n  let matchedIndices = []\n\n  if (isMatch) {\n    for (let i = 0, matchesLen = matches.length; i < matchesLen; i += 1) {\n      let match = matches[i]\n      matchedIndices.push([text.indexOf(match), match.length - 1])\n    }\n  }\n\n  return {\n    // TODO: revisit this score\n    score: isMatch ? 0.5 : 1,\n    isMatch,\n    matchedIndices\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/bitap/bitap_regex_search.js","module.exports = (pattern, { errors = 0, currentLocation = 0, expectedLocation = 0, distance = 100 }) => {\n  const accuracy = errors / pattern.length\n  const proximity = Math.abs(expectedLocation - currentLocation)\n\n  if (!distance) {\n    // Dodge divide by zero error.\n    return proximity ? 1.0 : accuracy\n  }\n\n  return accuracy + (proximity / distance)\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/bitap/bitap_score.js","const bitapScore = require('./bitap_score')\nconst matchedIndices = require('./bitap_matched_indices')\n\nmodule.exports = (text, pattern, patternAlphabet, { location = 0, distance = 100, threshold = 0.6, findAllMatches = false, minMatchCharLength = 1 }) => {\n  const expectedLocation = location\n  // Set starting location at beginning text and initialize the alphabet.\n  const textLen = text.length\n  // Highest score beyond which we give up.\n  let currentThreshold = threshold\n  // Is there a nearby exact match? (speedup)\n  let bestLocation = text.indexOf(pattern, expectedLocation)\n\n  const patternLen = pattern.length\n\n  // a mask of the matches\n  const matchMask = []\n  for (let i = 0; i < textLen; i += 1) {\n    matchMask[i] = 0\n  }\n\n  if (bestLocation !== -1) {\n    let score = bitapScore(pattern, {\n      errors: 0,\n      currentLocation: bestLocation,\n      expectedLocation,\n      distance\n    })\n    currentThreshold = Math.min(score, currentThreshold)\n\n    // What about in the other direction? (speed up)\n    bestLocation = text.lastIndexOf(pattern, expectedLocation + patternLen)\n\n    if (bestLocation !== -1) {\n      let score = bitapScore(pattern, {\n        errors: 0,\n        currentLocation: bestLocation,\n        expectedLocation,\n        distance\n      })\n      currentThreshold = Math.min(score, currentThreshold)\n    }\n  }\n\n  // Reset the best location\n  bestLocation = -1\n\n  let lastBitArr = []\n  let finalScore = 1\n  let binMax = patternLen + textLen\n\n  const mask = 1 << (patternLen - 1)\n\n  for (let i = 0; i < patternLen; i += 1) {\n    // Scan for the best match; each iteration allows for one more error.\n    // Run a binary search to determine how far from the match location we can stray\n    // at this error level.\n    let binMin = 0\n    let binMid = binMax\n\n    while (binMin < binMid) {\n      const score = bitapScore(pattern, {\n        errors: i,\n        currentLocation: expectedLocation + binMid,\n        expectedLocation,\n        distance\n      })\n\n      if (score <= currentThreshold) {\n        binMin = binMid\n      } else {\n        binMax = binMid\n      }\n\n      binMid = Math.floor((binMax - binMin) / 2 + binMin)\n    }\n\n    // Use the result from this iteration as the maximum for the next.\n    binMax = binMid\n\n    let start = Math.max(1, expectedLocation - binMid + 1)\n    let finish = findAllMatches ? textLen : Math.min(expectedLocation + binMid, textLen) + patternLen\n\n    // Initialize the bit array\n    let bitArr = Array(finish + 2)\n\n    bitArr[finish + 1] = (1 << i) - 1\n\n    for (let j = finish; j >= start; j -= 1) {\n      let currentLocation = j - 1\n      let charMatch = patternAlphabet[text.charAt(currentLocation)]\n\n      if (charMatch) {\n        matchMask[currentLocation] = 1\n      }\n\n      // First pass: exact match\n      bitArr[j] = ((bitArr[j + 1] << 1) | 1) & charMatch\n\n      // Subsequent passes: fuzzy match\n      if (i !== 0) {\n        bitArr[j] |= (((lastBitArr[j + 1] | lastBitArr[j]) << 1) | 1) | lastBitArr[j + 1]\n      }\n\n      if (bitArr[j] & mask) {\n        finalScore = bitapScore(pattern, {\n          errors: i,\n          currentLocation,\n          expectedLocation,\n          distance\n        })\n\n        // This match will almost certainly be better than any existing match.\n        // But check anyway.\n        if (finalScore <= currentThreshold) {\n          // Indeed it is\n          currentThreshold = finalScore\n          bestLocation = currentLocation\n\n          // Already passed `loc`, downhill from here on in.\n          if (bestLocation <= expectedLocation) {\n            break\n          }\n\n          // When passing `bestLocation`, don't exceed our current distance from `expectedLocation`.\n          start = Math.max(1, 2 * expectedLocation - bestLocation)\n        }\n      }\n    }\n\n    // No hope for a (better) match at greater error levels.\n    const score = bitapScore(pattern, {\n      errors: i + 1,\n      currentLocation: expectedLocation,\n      expectedLocation,\n      distance\n    })\n\n    // console.log('score', score, finalScore)\n\n    if (score > currentThreshold) {\n      break\n    }\n\n    lastBitArr = bitArr\n  }\n\n  // console.log('FINAL SCORE', finalScore)\n\n  // Count exact matches (those with a score of 0) to be \"almost\" exact\n  return {\n    isMatch: bestLocation >= 0,\n    score: finalScore === 0 ? 0.001 : finalScore,\n    matchedIndices: matchedIndices(matchMask, minMatchCharLength)\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/bitap/bitap_search.js","const Bitap = require('./bitap')\nconst deepValue = require('./helpers/deep_value')\nconst isArray = require('./helpers/is_array')\n\nclass Fuse {\n  constructor (list, {\n    // Approximately where in the text is the pattern expected to be found?\n    location = 0,\n    // Determines how close the match must be to the fuzzy location (specified above).\n    // An exact letter match which is 'distance' characters away from the fuzzy location\n    // would score as a complete mismatch. A distance of '0' requires the match be at\n    // the exact location specified, a threshold of '1000' would require a perfect match\n    // to be within 800 characters of the fuzzy location to be found using a 0.8 threshold.\n    distance = 100,\n    // At what point does the match algorithm give up. A threshold of '0.0' requires a perfect match\n    // (of both letters and location), a threshold of '1.0' would match anything.\n    threshold = 0.6,\n    // Machine word size\n    maxPatternLength = 32,\n    // Indicates whether comparisons should be case sensitive.\n    caseSensitive = false,\n    // Regex used to separate words when searching. Only applicable when `tokenize` is `true`.\n    tokenSeparator = / +/g,\n    // When true, the algorithm continues searching to the end of the input even if a perfect\n    // match is found before the end of the same input.\n    findAllMatches = false,\n    // Minimum number of characters that must be matched before a result is considered a match\n    minMatchCharLength = 1,\n    // The name of the identifier property. If specified, the returned result will be a list\n    // of the items' dentifiers, otherwise it will be a list of the items.\n    id = null,\n    // List of properties that will be searched. This also supports nested properties.\n    keys = [],\n    // Whether to sort the result list, by score\n    shouldSort = true,\n    // The get function to use when fetching an object's properties.\n    // The default will search nested paths *ie foo.bar.baz*\n    getFn = deepValue,\n    // Default sort function\n    sortFn = (a, b) => (a.score - b.score),\n    // When true, the search algorithm will search individual words **and** the full string,\n    // computing the final score as a function of both. Note that when `tokenize` is `true`,\n    // the `threshold`, `distance`, and `location` are inconsequential for individual tokens.\n    tokenize = false,\n    // When true, the result set will only include records that match all tokens. Will only work\n    // if `tokenize` is also true.\n    matchAllTokens = false,\n\n    includeMatches = false,\n    includeScore = false,\n\n    // Will print to the console. Useful for debugging.\n    verbose = false,\n\n    cancelled = false,\n    isSearching = false\n  }) {\n    this.options = {\n      location,\n      distance,\n      threshold,\n      maxPatternLength,\n      isCaseSensitive: caseSensitive,\n      tokenSeparator,\n      findAllMatches,\n      minMatchCharLength,\n      id,\n      keys,\n      includeMatches,\n      includeScore,\n      shouldSort,\n      getFn,\n      sortFn,\n      verbose,\n      tokenize,\n      matchAllTokens\n    }\n\n    this.setCollection(list)\n  }\n\n  cancel() {\n    this.cancelled = true;\n    if (!this.isSearching) {\n      this.cancelled = false;\n      return Promise.resolve();\n    }\n    return new Promise((resolve) => {\n      let checkIfStopped = () => {\n        setTimeout(() => {\n          if (!this.isSearching) {\n            this.cancelled = false;\n            resolve();\n          } else {\n            checkIfStopped();\n          }\n        }, 0);\n      };\n      checkIfStopped();\n    })\n  }\n\n  setCollection (list) {\n    this.list = list\n    return list\n  }\n\n  search (pattern) {\n    this._log(`---------\\nSearch pattern: \"${pattern}\"`)\n\n    const {\n      tokenSearchers,\n      fullSearcher\n    } = this._prepareSearchers(pattern)\n\n    return this._search(tokenSearchers, fullSearcher).then(({ weights, results }) => {\n      this._computeScore(weights, results)\n\n      if (this.options.shouldSort) {\n        this._sort(results)\n      }\n\n      return this._format(results)\n    });\n  }\n\n  _prepareSearchers (pattern = '') {\n    const tokenSearchers = []\n\n    if (this.options.tokenize) {\n      // Tokenize on the separator\n      const tokens = pattern.split(this.options.tokenSeparator)\n      for (let i = 0, len = tokens.length; i < len; i += 1) {\n        tokenSearchers.push(new Bitap(tokens[i], this.options))\n      }\n    }\n\n    let fullSearcher = new Bitap(pattern, this.options)\n\n    return { tokenSearchers, fullSearcher }\n  }\n\n  _search (tokenSearchers = [], fullSearcher) {\n    let iterate = (list, callbackFn, chunk) => {\n      return new Promise((resolve) => {\n        chunk = chunk || 200;\n        let index = 0;\n        let doChunk = () => {\n          if (this.cancelled) {\n            this.isSearching = false;\n            throw new Error('cancelled');\n          }\n          var cnt = chunk;\n          while (cnt-- && index < list.length) {\n            callbackFn(list[index], index)\n            ++index;\n          }\n          if (index < list.length) {\n            setTimeout(doChunk, 0);\n          } else {\n            resolve();\n          }\n        } \n        doChunk();\n      })\n    };\n    const list = this.list\n    const resultMap = {}\n    const results = []\n    this.isSearching = true;\n    // Check the first item in the list, if it's a string, then we assume\n    // that every item in the list is also a string, and thus it's a flattened array.\n    if (typeof list[0] === 'string') {\n      // Iterate over every item\n      return iterate(list, (val, i) => {\n        this._analyze({\n          key: '',\n          value: val,\n          record: i,\n          index: i\n        }, {\n          resultMap,\n          results,\n          tokenSearchers,\n          fullSearcher\n        });\n      }).then(() => {\n        this.isSearching = false;\n        return { weights: null, results }\n      });\n    }\n\n    // Otherwise, the first item is an Object (hopefully), and thus the searching\n    // is done on the values of the keys of each item.\n    const weights = {}\n    return iterate(list, (val, i) => {\n      let item = val\n      for (let j = 0, keysLen = this.options.keys.length; j < keysLen; j += 1) {\n        let key = this.options.keys[j]\n        if (typeof key !== 'string') {\n          weights[key.name] = {\n            weight: (1 - key.weight) || 1\n          }\n          if (key.weight <= 0 || key.weight > 1) {\n            throw new Error('Key weight has to be > 0 and <= 1')\n          }\n          key = key.name\n        } else {\n          weights[key] = {\n            weight: 1\n          }\n        }\n\n        this._analyze({\n          key,\n          value: this.options.getFn(item, key),\n          record: item,\n          index: i\n        }, {\n          resultMap,\n          results,\n          tokenSearchers,\n          fullSearcher\n        })\n      }\n    }).then(() => {\n      this.isSearching = false;\n\n      return { weights, results }\n    });\n  }\n\n  _analyze ({ key, arrayIndex = -1, value, record, index }, { tokenSearchers = [], fullSearcher = [], resultMap = {}, results = [] }) {\n    // Check if the texvaluet can be searched\n    if (value === undefined || value === null) {\n      return\n    }\n\n    let exists = false\n    let averageScore = -1\n    let numTextMatches = 0\n\n    if (typeof value === 'string') {\n      this._log(`\\nKey: ${key === '' ? '-' : key}`)\n\n      let mainSearchResult = fullSearcher.search(value)\n      this._log(`Full text: \"${value}\", score: ${mainSearchResult.score}`)\n\n      if (this.options.tokenize) {\n        let words = value.split(this.options.tokenSeparator)\n        let scores = []\n\n        for (let i = 0; i < tokenSearchers.length; i += 1) {\n          let tokenSearcher = tokenSearchers[i]\n\n          this._log(`\\nPattern: \"${tokenSearcher.pattern}\"`)\n\n          // let tokenScores = []\n          let hasMatchInText = false\n\n          for (let j = 0; j < words.length; j += 1) {\n            let word = words[j]\n            let tokenSearchResult = tokenSearcher.search(word)\n            let obj = {}\n            if (tokenSearchResult.isMatch) {\n              obj[word] = tokenSearchResult.score\n              exists = true\n              hasMatchInText = true\n              scores.push(tokenSearchResult.score)\n            } else {\n              obj[word] = 1\n              if (!this.options.matchAllTokens) {\n                scores.push(1)\n              }\n            }\n            this._log(`Token: \"${word}\", score: ${obj[word]}`)\n            // tokenScores.push(obj)\n          }\n\n          if (hasMatchInText) {\n            numTextMatches += 1\n          }\n        }\n\n        averageScore = scores[0]\n        let scoresLen = scores.length\n        for (let i = 1; i < scoresLen; i += 1) {\n          averageScore += scores[i]\n        }\n        averageScore = averageScore / scoresLen\n\n        this._log('Token score average:', averageScore)\n      }\n\n      let finalScore = mainSearchResult.score\n      if (averageScore > -1) {\n        finalScore = (finalScore + averageScore) / 2\n      }\n\n      this._log('Score average:', finalScore)\n\n      let checkTextMatches = (this.options.tokenize && this.options.matchAllTokens) ? numTextMatches >= tokenSearchers.length : true\n\n      this._log(`\\nCheck Matches: ${checkTextMatches}`)\n\n      // If a match is found, add the item to <rawResults>, including its score\n      if ((exists || mainSearchResult.isMatch) && checkTextMatches) {\n        // Check if the item already exists in our results\n        let existingResult = resultMap[index]\n        if (existingResult) {\n          // Use the lowest score\n          // existingResult.score, bitapResult.score\n          existingResult.output.push({\n            key,\n            arrayIndex,\n            value,\n            score: finalScore,\n            matchedIndices: mainSearchResult.matchedIndices\n          })\n        } else {\n          // Add it to the raw result list\n          resultMap[index] = {\n            item: record,\n            output: [{\n              key,\n              arrayIndex,\n              value,\n              score: finalScore,\n              matchedIndices: mainSearchResult.matchedIndices\n            }]\n          }\n\n          results.push(resultMap[index])\n        }\n      }\n    } else if (isArray(value)) {\n      for (let i = 0, len = value.length; i < len; i += 1) {\n        this._analyze({\n          key,\n          arrayIndex: i,\n          value: value[i],\n          record,\n          index\n        }, {\n          resultMap,\n          results,\n          tokenSearchers,\n          fullSearcher\n        })\n      }\n    }\n  }\n\n  _computeScore (weights, results) {\n    this._log('\\n\\nComputing score:\\n')\n\n    for (let i = 0, len = results.length; i < len; i += 1) {\n      const output = results[i].output\n      const scoreLen = output.length\n\n      let currScore = 1\n      let bestScore = 1\n\n      for (let j = 0; j < scoreLen; j += 1) {\n        let weight = weights ? weights[output[j].key].weight : 1\n        let score = weight === 1 ? output[j].score : (output[j].score || 0.001)\n        let nScore = score * weight\n\n        if (weight !== 1) {\n          bestScore = Math.min(bestScore, nScore)\n        } else {\n          output[j].nScore = nScore\n          currScore *= nScore\n        }\n      }\n\n      results[i].score = bestScore === 1 ? currScore : bestScore\n\n      this._log(results[i])\n    }\n  }\n\n  _sort (results) {\n    this._log('\\n\\nSorting....')\n    results.sort(this.options.sortFn)\n  }\n\n  _format (results) {\n    const finalOutput = []\n\n    if (this.options.verbose) {\n      this._log('\\n\\nOutput:\\n\\n', JSON.stringify(results))\n    }\n\n    let transformers = []\n\n    if (this.options.includeMatches) {\n      transformers.push((result, data) => {\n        const output = result.output\n        data.matches = []\n\n        for (let i = 0, len = output.length; i < len; i += 1) {\n          let item = output[i]\n\n          if (item.matchedIndices.length === 0) {\n            continue\n          }\n\n          let obj = {\n            indices: item.matchedIndices,\n            value: item.value\n          }\n          if (item.key) {\n            obj.key = item.key\n          }\n          if (item.hasOwnProperty('arrayIndex') && item.arrayIndex > -1) {\n            obj.arrayIndex = item.arrayIndex\n          }\n          data.matches.push(obj)\n        }\n      })\n    }\n\n    if (this.options.includeScore) {\n      transformers.push((result, data) => {\n        data.score = result.score\n      })\n    }\n\n    for (let i = 0, len = results.length; i < len; i += 1) {\n      const result = results[i]\n\n      if (this.options.id) {\n        result.item = this.options.getFn(result.item, this.options.id)[0]\n      }\n\n      if (!transformers.length) {\n        finalOutput.push(result.item)\n        continue\n      }\n\n      const data = {\n        item: result.item\n      }\n\n      for (let j = 0, len = transformers.length; j < len; j += 1) {\n        transformers[j](result, data)\n      }\n\n      finalOutput.push(data)\n    }\n\n    return finalOutput\n  }\n\n  _log () {\n    if (this.options.verbose) {\n      console.log(...arguments)\n    }\n  }\n}\n\nmodule.exports = Fuse\n\n\n\n// WEBPACK FOOTER //\n// ./src/index.js"],"sourceRoot":""}